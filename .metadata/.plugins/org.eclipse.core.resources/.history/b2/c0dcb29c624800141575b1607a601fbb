package station;

import clerk.BoxChecker;
import clerk.TicketBox;
import client.AbstractClient;
import client.StationClientQueue;

public abstract class Station  {
	
	// 역마다 클라이언트 큐.
	
	public StationClientQueue stationQueue = new StationClientQueue();
	public String name;
	
	public Station() {
		System.out.println(stationQueue.isEmpty());
		createTicketbox();
		Thread checker = new Thread ( new queueChecker());
		checker.start();
	}
	

	// 3개의 티켓박스.
	
	TicketBox ticketBoxAlpha;
	TicketBox ticketBoxBetha;
	TicketBox ticketBoxGamma;
	
	BoxChecker boxChecker = new BoxChecker();

	
	public void add(AbstractClient abstractClient) {
		this.stationQueue.add(abstractClient);
		print();
	}
	
	public void createTicketbox() {
		
		this.ticketBoxAlpha = new TicketBox("Alpha");
		
	//	this.ticketBoxBetha = new TicketBox("Betha");
	//	this.ticketBoxGamma = new TicketBox("Gamma");
	}
	
	
	public StationClientQueue getStationQueue() {
		return stationQueue;
	}
	
	class queueChecker implements Runnable {
		boolean Live = true;
		public void run() {
			while(Live) {
				try {
					Thread.sleep(5000);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				boxChecker.setQueue(stationQueue);
				System.out.println("queuechecker 내부에서 주기적으로 큐를 확인하는 메소드.");
				try{
				boxChecker.setQueue(stationQueue);
				}catch (Exception e) {
					e.printStackTrace();
					Live = false;
				}
			}
		}
	}


	// 하나의 플랫폼 큐
	
	// 연결된 역의 리스트.
	
	public void print() {
		System.out.println(stationQueue.get(0).getName());
	}

}
